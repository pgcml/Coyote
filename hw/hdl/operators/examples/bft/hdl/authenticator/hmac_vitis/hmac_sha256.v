// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hmac_sha256_hmac_sha256,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.878000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=23015,HLS_SYN_LUT=19504,HLS_VERSION=2022_1}" *)

module hmac_sha256 (
        ap_clk,
        ap_rst_n,
        keyStrm_TDATA,
        keyStrm_TVALID,
        keyStrm_TREADY,
        msgStrm_TDATA,
        msgStrm_TVALID,
        msgStrm_TREADY,
        lenStrm_TDATA,
        lenStrm_TVALID,
        lenStrm_TREADY,
        eLenStrm_TDATA,
        eLenStrm_TVALID,
        eLenStrm_TREADY,
        hshStrm_TDATA,
        hshStrm_TVALID,
        hshStrm_TREADY,
        eHshStrm_TDATA,
        eHshStrm_TVALID,
        eHshStrm_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] keyStrm_TDATA;
input   keyStrm_TVALID;
output   keyStrm_TREADY;
input  [31:0] msgStrm_TDATA;
input   msgStrm_TVALID;
output   msgStrm_TREADY;
input  [63:0] lenStrm_TDATA;
input   lenStrm_TVALID;
output   lenStrm_TREADY;
input  [7:0] eLenStrm_TDATA;
input   eLenStrm_TVALID;
output   eLenStrm_TREADY;
output  [255:0] hshStrm_TDATA;
output   hshStrm_TVALID;
input   hshStrm_TREADY;
output  [7:0] eHshStrm_TDATA;
output   eHshStrm_TVALID;
input   eHshStrm_TREADY;

 reg    ap_rst_n_inv;
wire   [255:0] grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TDATA;
wire   [7:0] grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TDATA;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_keyStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eLenStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_msgStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_lenStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TVALID;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TVALID;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TREADY;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_idle;
reg    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_continue;
reg    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready;
wire    ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready;
reg    ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done;
reg   [3:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_hshStrm_U_apdone_blk;
wire    regslice_both_eHshStrm_U_apdone_blk;
reg    ap_block_state4;
wire    ap_CS_fsm_state4;
wire    regslice_both_keyStrm_U_apdone_blk;
wire   [31:0] keyStrm_TDATA_int_regslice;
wire    keyStrm_TVALID_int_regslice;
reg    keyStrm_TREADY_int_regslice;
wire    regslice_both_keyStrm_U_ack_in;
wire    regslice_both_msgStrm_U_apdone_blk;
wire   [31:0] msgStrm_TDATA_int_regslice;
wire    msgStrm_TVALID_int_regslice;
reg    msgStrm_TREADY_int_regslice;
wire    regslice_both_msgStrm_U_ack_in;
wire    regslice_both_lenStrm_U_apdone_blk;
wire   [63:0] lenStrm_TDATA_int_regslice;
wire    lenStrm_TVALID_int_regslice;
reg    lenStrm_TREADY_int_regslice;
wire    regslice_both_lenStrm_U_ack_in;
wire    regslice_both_eLenStrm_U_apdone_blk;
wire   [7:0] eLenStrm_TDATA_int_regslice;
wire    eLenStrm_TVALID_int_regslice;
reg    eLenStrm_TREADY_int_regslice;
wire    regslice_both_eLenStrm_U_ack_in;
wire    hshStrm_TREADY_int_regslice;
wire    regslice_both_hshStrm_U_vld_out;
wire    eHshStrm_TREADY_int_regslice;
wire    regslice_both_eHshStrm_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready = 1'b0;
#0 ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done = 1'b0;
end

hmac_sha256_hmacDataflow_32_64_256_32_64_sha256_wrapper_s grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36(
    .keyStrm_TDATA(keyStrm_TDATA_int_regslice),
    .msgStrm_TDATA(msgStrm_TDATA_int_regslice),
    .lenStrm_TDATA(lenStrm_TDATA_int_regslice),
    .eLenStrm_TDATA(eLenStrm_TDATA_int_regslice),
    .hshStrm_TDATA(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TDATA),
    .eHshStrm_TDATA(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .keyStrm_TVALID(keyStrm_TVALID_int_regslice),
    .keyStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_keyStrm_TREADY),
    .eLenStrm_TVALID(eLenStrm_TVALID_int_regslice),
    .eLenStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eLenStrm_TREADY),
    .ap_start(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start),
    .msgStrm_TVALID(msgStrm_TVALID_int_regslice),
    .msgStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_msgStrm_TREADY),
    .lenStrm_TVALID(lenStrm_TVALID_int_regslice),
    .lenStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_lenStrm_TREADY),
    .hshStrm_TVALID(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TVALID),
    .hshStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TREADY),
    .eHshStrm_TVALID(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TVALID),
    .eHshStrm_TREADY(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TREADY),
    .ap_done(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done),
    .ap_ready(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready),
    .ap_idle(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_idle),
    .ap_continue(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_continue)
);

hmac_sha256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_keyStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(keyStrm_TDATA),
    .vld_in(keyStrm_TVALID),
    .ack_in(regslice_both_keyStrm_U_ack_in),
    .data_out(keyStrm_TDATA_int_regslice),
    .vld_out(keyStrm_TVALID_int_regslice),
    .ack_out(keyStrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_keyStrm_U_apdone_blk)
);

hmac_sha256_regslice_both #(
    .DataWidth( 32 ))
regslice_both_msgStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(msgStrm_TDATA),
    .vld_in(msgStrm_TVALID),
    .ack_in(regslice_both_msgStrm_U_ack_in),
    .data_out(msgStrm_TDATA_int_regslice),
    .vld_out(msgStrm_TVALID_int_regslice),
    .ack_out(msgStrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_msgStrm_U_apdone_blk)
);

hmac_sha256_regslice_both #(
    .DataWidth( 64 ))
regslice_both_lenStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(lenStrm_TDATA),
    .vld_in(lenStrm_TVALID),
    .ack_in(regslice_both_lenStrm_U_ack_in),
    .data_out(lenStrm_TDATA_int_regslice),
    .vld_out(lenStrm_TVALID_int_regslice),
    .ack_out(lenStrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_lenStrm_U_apdone_blk)
);

hmac_sha256_regslice_both #(
    .DataWidth( 8 ))
regslice_both_eLenStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(eLenStrm_TDATA),
    .vld_in(eLenStrm_TVALID),
    .ack_in(regslice_both_eLenStrm_U_ack_in),
    .data_out(eLenStrm_TDATA_int_regslice),
    .vld_out(eLenStrm_TVALID_int_regslice),
    .ack_out(eLenStrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_eLenStrm_U_apdone_blk)
);

hmac_sha256_regslice_both #(
    .DataWidth( 256 ))
regslice_both_hshStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TDATA),
    .vld_in(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TVALID),
    .ack_in(hshStrm_TREADY_int_regslice),
    .data_out(hshStrm_TDATA),
    .vld_out(regslice_both_hshStrm_U_vld_out),
    .ack_out(hshStrm_TREADY),
    .apdone_blk(regslice_both_hshStrm_U_apdone_blk)
);

hmac_sha256_regslice_both #(
    .DataWidth( 8 ))
regslice_both_eHshStrm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TDATA),
    .vld_in(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TVALID),
    .ack_in(eHshStrm_TREADY_int_regslice),
    .data_out(eHshStrm_TDATA),
    .vld_out(regslice_both_eHshStrm_U_vld_out),
    .ack_out(eHshStrm_TREADY),
    .apdone_blk(regslice_both_eHshStrm_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done <= 1'b0;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done == 1'b1)) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready <= 1'b0;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready == 1'b1)) begin
            grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_eHshStrm_U_apdone_blk == 1'b1) | (regslice_both_hshStrm_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        eLenStrm_TREADY_int_regslice = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eLenStrm_TREADY;
    end else begin
        eLenStrm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_continue = 1'b1;
    end else begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        keyStrm_TREADY_int_regslice = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_keyStrm_TREADY;
    end else begin
        keyStrm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lenStrm_TREADY_int_regslice = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_lenStrm_TREADY;
    end else begin
        lenStrm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        msgStrm_TREADY_int_regslice = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_msgStrm_TREADY;
    end else begin
        msgStrm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_eHshStrm_U_apdone_blk == 1'b1) | (regslice_both_hshStrm_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready & ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_eHshStrm_U_apdone_blk == 1'b1) | (regslice_both_hshStrm_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done = (grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done | ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_done);

assign ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready = (grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready | ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_ready);

assign eHshStrm_TVALID = regslice_both_eHshStrm_U_vld_out;

assign eLenStrm_TREADY = regslice_both_eLenStrm_U_ack_in;

assign grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_ap_start_reg;

assign grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_eHshStrm_TREADY = (eHshStrm_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_36_hshStrm_TREADY = (hshStrm_TREADY_int_regslice & ap_CS_fsm_state3);

assign hshStrm_TVALID = regslice_both_hshStrm_U_vld_out;

assign keyStrm_TREADY = regslice_both_keyStrm_U_ack_in;

assign lenStrm_TREADY = regslice_both_lenStrm_U_ack_in;

assign msgStrm_TREADY = regslice_both_msgStrm_U_ack_in;

endmodule //hmac_sha256
