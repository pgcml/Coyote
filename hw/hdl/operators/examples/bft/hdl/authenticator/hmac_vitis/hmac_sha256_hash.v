// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_hash (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mergeKipadStrm3_dout,
        mergeKipadStrm3_num_data_valid,
        mergeKipadStrm3_fifo_cap,
        mergeKipadStrm3_empty_n,
        mergeKipadStrm3_read,
        mergeKipadLenStrm4_dout,
        mergeKipadLenStrm4_num_data_valid,
        mergeKipadLenStrm4_fifo_cap,
        mergeKipadLenStrm4_empty_n,
        mergeKipadLenStrm4_read,
        eMergeKipadLenStrm5_dout,
        eMergeKipadLenStrm5_num_data_valid,
        eMergeKipadLenStrm5_fifo_cap,
        eMergeKipadLenStrm5_empty_n,
        eMergeKipadLenStrm5_read,
        msgHashStrm10_din,
        msgHashStrm10_num_data_valid,
        msgHashStrm10_fifo_cap,
        msgHashStrm10_full_n,
        msgHashStrm10_write,
        eMsgHashStrm11_din,
        eMsgHashStrm11_num_data_valid,
        eMsgHashStrm11_fifo_cap,
        eMsgHashStrm11_full_n,
        eMsgHashStrm11_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mergeKipadStrm3_dout;
input  [7:0] mergeKipadStrm3_num_data_valid;
input  [7:0] mergeKipadStrm3_fifo_cap;
input   mergeKipadStrm3_empty_n;
output   mergeKipadStrm3_read;
input  [63:0] mergeKipadLenStrm4_dout;
input  [2:0] mergeKipadLenStrm4_num_data_valid;
input  [2:0] mergeKipadLenStrm4_fifo_cap;
input   mergeKipadLenStrm4_empty_n;
output   mergeKipadLenStrm4_read;
input  [0:0] eMergeKipadLenStrm5_dout;
input  [2:0] eMergeKipadLenStrm5_num_data_valid;
input  [2:0] eMergeKipadLenStrm5_fifo_cap;
input   eMergeKipadLenStrm5_empty_n;
output   eMergeKipadLenStrm5_read;
output  [255:0] msgHashStrm10_din;
input  [2:0] msgHashStrm10_num_data_valid;
input  [2:0] msgHashStrm10_fifo_cap;
input   msgHashStrm10_full_n;
output   msgHashStrm10_write;
output  [0:0] eMsgHashStrm11_din;
input  [2:0] eMsgHashStrm11_num_data_valid;
input  [2:0] eMsgHashStrm11_fifo_cap;
input   eMsgHashStrm11_full_n;
output   eMsgHashStrm11_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mergeKipadStrm3_read;
reg mergeKipadLenStrm4_read;
reg eMergeKipadLenStrm5_read;
reg msgHashStrm10_write;
reg eMsgHashStrm11_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_sha256_top_32_256_s_fu_32_mergeKipadStrm3_read;
wire    grp_sha256_top_32_256_s_fu_32_mergeKipadLenStrm4_read;
wire    grp_sha256_top_32_256_s_fu_32_eMergeKipadLenStrm5_read;
wire   [255:0] grp_sha256_top_32_256_s_fu_32_msgHashStrm10_din;
wire    grp_sha256_top_32_256_s_fu_32_msgHashStrm10_write;
wire   [0:0] grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_din;
wire    grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_write;
wire    grp_sha256_top_32_256_s_fu_32_ap_start;
wire    grp_sha256_top_32_256_s_fu_32_ap_done;
wire    grp_sha256_top_32_256_s_fu_32_ap_ready;
wire    grp_sha256_top_32_256_s_fu_32_ap_idle;
reg    grp_sha256_top_32_256_s_fu_32_ap_continue;
reg    grp_sha256_top_32_256_s_fu_32_ap_start_reg;
reg    ap_block_state1_ignore_call10;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_sha256_top_32_256_s_fu_32_ap_ready;
wire    ap_sync_grp_sha256_top_32_256_s_fu_32_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready;
reg    ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_sha256_top_32_256_s_fu_32_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready = 1'b0;
#0 ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done = 1'b0;
end

hmac_sha256_sha256_top_32_256_s grp_sha256_top_32_256_s_fu_32(
    .mergeKipadStrm3_dout(mergeKipadStrm3_dout),
    .mergeKipadStrm3_empty_n(mergeKipadStrm3_empty_n),
    .mergeKipadStrm3_read(grp_sha256_top_32_256_s_fu_32_mergeKipadStrm3_read),
    .mergeKipadLenStrm4_dout(mergeKipadLenStrm4_dout),
    .mergeKipadLenStrm4_empty_n(mergeKipadLenStrm4_empty_n),
    .mergeKipadLenStrm4_read(grp_sha256_top_32_256_s_fu_32_mergeKipadLenStrm4_read),
    .eMergeKipadLenStrm5_dout(eMergeKipadLenStrm5_dout),
    .eMergeKipadLenStrm5_empty_n(eMergeKipadLenStrm5_empty_n),
    .eMergeKipadLenStrm5_read(grp_sha256_top_32_256_s_fu_32_eMergeKipadLenStrm5_read),
    .msgHashStrm10_din(grp_sha256_top_32_256_s_fu_32_msgHashStrm10_din),
    .msgHashStrm10_full_n(msgHashStrm10_full_n),
    .msgHashStrm10_write(grp_sha256_top_32_256_s_fu_32_msgHashStrm10_write),
    .eMsgHashStrm11_din(grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_din),
    .eMsgHashStrm11_full_n(eMsgHashStrm11_full_n),
    .eMsgHashStrm11_write(grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_top_32_256_s_fu_32_ap_start),
    .ap_done(grp_sha256_top_32_256_s_fu_32_ap_done),
    .ap_ready(grp_sha256_top_32_256_s_fu_32_ap_ready),
    .ap_idle(grp_sha256_top_32_256_s_fu_32_ap_idle),
    .ap_continue(grp_sha256_top_32_256_s_fu_32_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done <= 1'b0;
        end else if ((grp_sha256_top_32_256_s_fu_32_ap_done == 1'b1)) begin
            ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready <= 1'b0;
        end else if ((grp_sha256_top_32_256_s_fu_32_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_top_32_256_s_fu_32_ap_start_reg <= 1'b0;
    end else begin
        if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_sync_grp_sha256_top_32_256_s_fu_32_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_sha256_top_32_256_s_fu_32_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_top_32_256_s_fu_32_ap_ready == 1'b1)) begin
            grp_sha256_top_32_256_s_fu_32_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eMergeKipadLenStrm5_read = grp_sha256_top_32_256_s_fu_32_eMergeKipadLenStrm5_read;
    end else begin
        eMergeKipadLenStrm5_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eMsgHashStrm11_write = grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_write;
    end else begin
        eMsgHashStrm11_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_sha256_top_32_256_s_fu_32_ap_continue = 1'b1;
    end else begin
        grp_sha256_top_32_256_s_fu_32_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mergeKipadLenStrm4_read = grp_sha256_top_32_256_s_fu_32_mergeKipadLenStrm4_read;
    end else begin
        mergeKipadLenStrm4_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mergeKipadStrm3_read = grp_sha256_top_32_256_s_fu_32_mergeKipadStrm3_read;
    end else begin
        mergeKipadStrm3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        msgHashStrm10_write = grp_sha256_top_32_256_s_fu_32_msgHashStrm10_write;
    end else begin
        msgHashStrm10_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call10 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_sha256_top_32_256_s_fu_32_ap_ready & ap_sync_grp_sha256_top_32_256_s_fu_32_ap_done) == 1'b0);
end

assign ap_sync_grp_sha256_top_32_256_s_fu_32_ap_done = (grp_sha256_top_32_256_s_fu_32_ap_done | ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_done);

assign ap_sync_grp_sha256_top_32_256_s_fu_32_ap_ready = (grp_sha256_top_32_256_s_fu_32_ap_ready | ap_sync_reg_grp_sha256_top_32_256_s_fu_32_ap_ready);

assign eMsgHashStrm11_din = grp_sha256_top_32_256_s_fu_32_eMsgHashStrm11_din;

assign grp_sha256_top_32_256_s_fu_32_ap_start = grp_sha256_top_32_256_s_fu_32_ap_start_reg;

assign msgHashStrm10_din = grp_sha256_top_32_256_s_fu_32_msgHashStrm10_din;

endmodule //hmac_sha256_hash
