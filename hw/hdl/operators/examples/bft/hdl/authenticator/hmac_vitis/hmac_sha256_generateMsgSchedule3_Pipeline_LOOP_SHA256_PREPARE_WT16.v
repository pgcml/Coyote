// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_generateMsgSchedule3_Pipeline_LOOP_SHA256_PREPARE_WT16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_strm14_din,
        w_strm14_num_data_valid,
        w_strm14_fifo_cap,
        w_strm14_full_n,
        w_strm14_write,
        tmp_M,
        tmp_M_1,
        tmp_M_2,
        tmp_M_3,
        tmp_M_4,
        tmp_M_5,
        tmp_M_6,
        tmp_M_7,
        tmp_M_8,
        tmp_M_9,
        tmp_M_10,
        tmp_M_11,
        tmp_M_12,
        tmp_M_13,
        tmp_M_14,
        tmp_M_15,
        W_15_out,
        W_15_out_ap_vld,
        W_14_out,
        W_14_out_ap_vld,
        W_13_out,
        W_13_out_ap_vld,
        W_12_out,
        W_12_out_ap_vld,
        W_11_out,
        W_11_out_ap_vld,
        W_10_out,
        W_10_out_ap_vld,
        W_9_out,
        W_9_out_ap_vld,
        W_8_out,
        W_8_out_ap_vld,
        W_7_out,
        W_7_out_ap_vld,
        W_6_out,
        W_6_out_ap_vld,
        W_5_out,
        W_5_out_ap_vld,
        W_4_out,
        W_4_out_ap_vld,
        W_3_out,
        W_3_out_ap_vld,
        W_2_out,
        W_2_out_ap_vld,
        W_1_out,
        W_1_out_ap_vld,
        W_out,
        W_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] w_strm14_din;
input  [5:0] w_strm14_num_data_valid;
input  [5:0] w_strm14_fifo_cap;
input   w_strm14_full_n;
output   w_strm14_write;
input  [31:0] tmp_M;
input  [31:0] tmp_M_1;
input  [31:0] tmp_M_2;
input  [31:0] tmp_M_3;
input  [31:0] tmp_M_4;
input  [31:0] tmp_M_5;
input  [31:0] tmp_M_6;
input  [31:0] tmp_M_7;
input  [31:0] tmp_M_8;
input  [31:0] tmp_M_9;
input  [31:0] tmp_M_10;
input  [31:0] tmp_M_11;
input  [31:0] tmp_M_12;
input  [31:0] tmp_M_13;
input  [31:0] tmp_M_14;
input  [31:0] tmp_M_15;
output  [31:0] W_15_out;
output   W_15_out_ap_vld;
output  [31:0] W_14_out;
output   W_14_out_ap_vld;
output  [31:0] W_13_out;
output   W_13_out_ap_vld;
output  [31:0] W_12_out;
output   W_12_out_ap_vld;
output  [31:0] W_11_out;
output   W_11_out_ap_vld;
output  [31:0] W_10_out;
output   W_10_out_ap_vld;
output  [31:0] W_9_out;
output   W_9_out_ap_vld;
output  [31:0] W_8_out;
output   W_8_out_ap_vld;
output  [31:0] W_7_out;
output   W_7_out_ap_vld;
output  [31:0] W_6_out;
output   W_6_out_ap_vld;
output  [31:0] W_5_out;
output   W_5_out_ap_vld;
output  [31:0] W_4_out;
output   W_4_out_ap_vld;
output  [31:0] W_3_out;
output   W_3_out_ap_vld;
output  [31:0] W_2_out;
output   W_2_out_ap_vld;
output  [31:0] W_1_out;
output   W_1_out_ap_vld;
output  [31:0] W_out;
output   W_out_ap_vld;

reg ap_idle;
reg w_strm14_write;
reg W_15_out_ap_vld;
reg W_14_out_ap_vld;
reg W_13_out_ap_vld;
reg W_12_out_ap_vld;
reg W_11_out_ap_vld;
reg W_10_out_ap_vld;
reg W_9_out_ap_vld;
reg W_8_out_ap_vld;
reg W_7_out_ap_vld;
reg W_6_out_ap_vld;
reg W_5_out_ap_vld;
reg W_4_out_ap_vld;
reg W_3_out_ap_vld;
reg W_2_out_ap_vld;
reg W_1_out_ap_vld;
reg W_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln541_fu_431_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w_strm14_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] W_19_fu_443_p18;
reg   [31:0] W_19_reg_740;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] t_fu_140;
wire   [4:0] add_ln541_fu_437_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_t_4;
reg   [31:0] W_fu_144;
wire   [3:0] trunc_ln544_fu_481_p1;
reg   [31:0] W_1_fu_148;
reg   [31:0] W_2_fu_152;
reg   [31:0] W_3_fu_156;
reg   [31:0] W_4_fu_160;
reg   [31:0] W_5_fu_164;
reg   [31:0] W_6_fu_168;
reg   [31:0] W_7_fu_172;
reg   [31:0] W_8_fu_176;
reg   [31:0] W_9_fu_180;
reg   [31:0] W_10_fu_184;
reg   [31:0] W_11_fu_188;
reg   [31:0] W_12_fu_192;
reg   [31:0] W_13_fu_196;
reg   [31:0] W_14_fu_200;
reg   [31:0] W_15_fu_204;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

hmac_sha256_mux_165_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_165_32_1_1_U65(
    .din0(tmp_M),
    .din1(tmp_M_1),
    .din2(tmp_M_2),
    .din3(tmp_M_3),
    .din4(tmp_M_4),
    .din5(tmp_M_5),
    .din6(tmp_M_6),
    .din7(tmp_M_7),
    .din8(tmp_M_8),
    .din9(tmp_M_9),
    .din10(tmp_M_10),
    .din11(tmp_M_11),
    .din12(tmp_M_12),
    .din13(tmp_M_13),
    .din14(tmp_M_14),
    .din15(tmp_M_15),
    .din16(ap_sig_allocacmp_t_4),
    .dout(W_19_fu_443_p18)
);

hmac_sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln541_fu_431_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_fu_140 <= add_ln541_fu_437_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_140 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd5))) begin
        W_10_fu_184 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd4))) begin
        W_11_fu_188 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd3))) begin
        W_12_fu_192 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd2))) begin
        W_13_fu_196 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd1))) begin
        W_14_fu_200 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd0))) begin
        W_15_fu_204 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_19_reg_740 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd14))) begin
        W_1_fu_148 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd13))) begin
        W_2_fu_152 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd12))) begin
        W_3_fu_156 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd11))) begin
        W_4_fu_160 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd10))) begin
        W_5_fu_164 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd9))) begin
        W_6_fu_168 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd8))) begin
        W_7_fu_172 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd7))) begin
        W_8_fu_176 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd6))) begin
        W_9_fu_180 <= W_19_fu_443_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln541_fu_431_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln544_fu_481_p1 == 4'd15))) begin
        W_fu_144 <= W_19_fu_443_p18;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_10_out_ap_vld = 1'b1;
    end else begin
        W_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_11_out_ap_vld = 1'b1;
    end else begin
        W_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_12_out_ap_vld = 1'b1;
    end else begin
        W_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_13_out_ap_vld = 1'b1;
    end else begin
        W_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_14_out_ap_vld = 1'b1;
    end else begin
        W_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_15_out_ap_vld = 1'b1;
    end else begin
        W_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_1_out_ap_vld = 1'b1;
    end else begin
        W_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_2_out_ap_vld = 1'b1;
    end else begin
        W_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_3_out_ap_vld = 1'b1;
    end else begin
        W_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_4_out_ap_vld = 1'b1;
    end else begin
        W_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_5_out_ap_vld = 1'b1;
    end else begin
        W_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_6_out_ap_vld = 1'b1;
    end else begin
        W_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_7_out_ap_vld = 1'b1;
    end else begin
        W_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_8_out_ap_vld = 1'b1;
    end else begin
        W_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_9_out_ap_vld = 1'b1;
    end else begin
        W_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_out_ap_vld = 1'b1;
    end else begin
        W_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln541_fu_431_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_4 = 5'd0;
    end else begin
        ap_sig_allocacmp_t_4 = t_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_strm14_blk_n = w_strm14_full_n;
    end else begin
        w_strm14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_strm14_write = 1'b1;
    end else begin
        w_strm14_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_10_out = W_10_fu_184;

assign W_11_out = W_11_fu_188;

assign W_12_out = W_12_fu_192;

assign W_13_out = W_13_fu_196;

assign W_14_out = W_14_fu_200;

assign W_15_out = W_15_fu_204;

assign W_1_out = W_1_fu_148;

assign W_2_out = W_2_fu_152;

assign W_3_out = W_3_fu_156;

assign W_4_out = W_4_fu_160;

assign W_5_out = W_5_fu_164;

assign W_6_out = W_6_fu_168;

assign W_7_out = W_7_fu_172;

assign W_8_out = W_8_fu_176;

assign W_9_out = W_9_fu_180;

assign W_out = W_fu_144;

assign add_ln541_fu_437_p2 = (ap_sig_allocacmp_t_4 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (w_strm14_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln541_fu_431_p2 = ((ap_sig_allocacmp_t_4 == 5'd16) ? 1'b1 : 1'b0);

assign trunc_ln544_fu_481_p1 = ap_sig_allocacmp_t_4[3:0];

assign w_strm14_din = W_19_reg_740;

endmodule //hmac_sha256_generateMsgSchedule3_Pipeline_LOOP_SHA256_PREPARE_WT16
