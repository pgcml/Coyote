// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_hmac_sha256_kpad_32_64_256_32_64_sha256_wrapper_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        keyStrm_dout,
        keyStrm_empty_n,
        keyStrm_read,
        eLenStrm_dout,
        eLenStrm_empty_n,
        eLenStrm_read,
        kipadStrm7_din,
        kipadStrm7_num_data_valid,
        kipadStrm7_fifo_cap,
        kipadStrm7_full_n,
        kipadStrm7_write,
        kopadStrm8_din,
        kopadStrm8_num_data_valid,
        kopadStrm8_fifo_cap,
        kopadStrm8_full_n,
        kopadStrm8_write,
        eKipadStrm6_din,
        eKipadStrm6_num_data_valid,
        eKipadStrm6_fifo_cap,
        eKipadStrm6_full_n,
        eKipadStrm6_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] keyStrm_dout;
input   keyStrm_empty_n;
output   keyStrm_read;
input  [0:0] eLenStrm_dout;
input   eLenStrm_empty_n;
output   eLenStrm_read;
output  [511:0] kipadStrm7_din;
input  [2:0] kipadStrm7_num_data_valid;
input  [2:0] kipadStrm7_fifo_cap;
input   kipadStrm7_full_n;
output   kipadStrm7_write;
output  [511:0] kopadStrm8_din;
input  [2:0] kopadStrm8_num_data_valid;
input  [2:0] kopadStrm8_fifo_cap;
input   kopadStrm8_full_n;
output   kopadStrm8_write;
output  [0:0] eKipadStrm6_din;
input  [2:0] eKipadStrm6_num_data_valid;
input  [2:0] eKipadStrm6_fifo_cap;
input   eKipadStrm6_full_n;
output   eKipadStrm6_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg keyStrm_read;
reg eLenStrm_read;
reg kipadStrm7_write;
reg kopadStrm8_write;
reg[0:0] eKipadStrm6_din;
reg eKipadStrm6_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    eLenStrm_blk_n;
wire    ap_CS_fsm_state2;
reg    eKipadStrm6_blk_n;
wire   [0:0] tmp_read_fu_42_p2;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_done;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_idle;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_ready;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_keyStrm_read;
wire   [511:0] grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_din;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_write;
wire   [511:0] grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_din;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_write;
wire   [0:0] grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_din;
wire    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_write;
reg    grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg;
reg    ap_block_state2_ignore_call2;
wire    ap_CS_fsm_state3;
reg    ap_block_state2;
reg   [2:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg = 1'b0;
end

test_hmac_sha256_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2 grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start),
    .ap_done(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_done),
    .ap_idle(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_idle),
    .ap_ready(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_ready),
    .keyStrm_dout(keyStrm_dout),
    .keyStrm_empty_n(keyStrm_empty_n),
    .keyStrm_read(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_keyStrm_read),
    .kipadStrm7_din(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_din),
    .kipadStrm7_num_data_valid(3'd0),
    .kipadStrm7_fifo_cap(3'd0),
    .kipadStrm7_full_n(kipadStrm7_full_n),
    .kipadStrm7_write(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_write),
    .kopadStrm8_din(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_din),
    .kopadStrm8_num_data_valid(3'd0),
    .kopadStrm8_fifo_cap(3'd0),
    .kopadStrm8_full_n(kopadStrm8_full_n),
    .kopadStrm8_write(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_write),
    .eKipadStrm6_din(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_din),
    .eKipadStrm6_num_data_valid(3'd0),
    .eKipadStrm6_fifo_cap(3'd0),
    .eKipadStrm6_full_n(eKipadStrm6_full_n),
    .eKipadStrm6_write(grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (tmp_read_fu_42_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_ready == 1'b1)) begin
            grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        eKipadStrm6_blk_n = eKipadStrm6_full_n;
    end else begin
        eKipadStrm6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        eKipadStrm6_din = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        eKipadStrm6_din = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_din;
    end else begin
        eKipadStrm6_din = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_din;
    end
end

always @ (*) begin
    if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        eKipadStrm6_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        eKipadStrm6_write = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_eKipadStrm6_write;
    end else begin
        eKipadStrm6_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eLenStrm_blk_n = eLenStrm_empty_n;
    end else begin
        eLenStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        eLenStrm_read = 1'b1;
    end else begin
        eLenStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        keyStrm_read = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_keyStrm_read;
    end else begin
        keyStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kipadStrm7_write = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_write;
    end else begin
        kipadStrm7_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kopadStrm8_write = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_write;
    end else begin
        kopadStrm8_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (eLenStrm_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0))) & (tmp_read_fu_42_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_ignore_call2 = ((eLenStrm_empty_n == 1'b0) | ((eLenStrm_dout == 1'd1) & (eKipadStrm6_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_ap_start_reg;

assign kipadStrm7_din = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kipadStrm7_din;

assign kopadStrm8_din = grp_kpad_32_64_256_32_64_sha256_wrapper_Pipeline_VITIS_LOOP_120_2_fu_56_kopadStrm8_din;

assign start_out = real_start;

assign tmp_read_fu_42_p2 = eLenStrm_dout;

endmodule //test_hmac_sha256_kpad_32_64_256_32_64_sha256_wrapper_s
