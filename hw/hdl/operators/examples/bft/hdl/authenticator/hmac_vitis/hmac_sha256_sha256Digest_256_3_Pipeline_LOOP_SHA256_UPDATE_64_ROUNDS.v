// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_strm14_dout,
        w_strm14_num_data_valid,
        w_strm14_fifo_cap,
        w_strm14_empty_n,
        w_strm14_read,
        h,
        g,
        f,
        e,
        d,
        c,
        b,
        a,
        h_1_out,
        h_1_out_ap_vld,
        g_3_out,
        g_3_out_ap_vld,
        f_3_out,
        f_3_out_ap_vld,
        e_3_out,
        e_3_out_ap_vld,
        d_1_out,
        d_1_out_ap_vld,
        c_3_out,
        c_3_out_ap_vld,
        b_3_out,
        b_3_out_ap_vld,
        a_3_out,
        a_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] w_strm14_dout;
input  [5:0] w_strm14_num_data_valid;
input  [5:0] w_strm14_fifo_cap;
input   w_strm14_empty_n;
output   w_strm14_read;
input  [31:0] h;
input  [31:0] g;
input  [31:0] f;
input  [31:0] e;
input  [31:0] d;
input  [31:0] c;
input  [31:0] b;
input  [31:0] a;
output  [31:0] h_1_out;
output   h_1_out_ap_vld;
output  [31:0] g_3_out;
output   g_3_out_ap_vld;
output  [31:0] f_3_out;
output   f_3_out_ap_vld;
output  [31:0] e_3_out;
output   e_3_out_ap_vld;
output  [31:0] d_1_out;
output   d_1_out_ap_vld;
output  [31:0] c_3_out;
output   c_3_out_ap_vld;
output  [31:0] b_3_out;
output   b_3_out_ap_vld;
output  [31:0] a_3_out;
output   a_3_out_ap_vld;

reg ap_idle;
reg w_strm14_read;
reg h_1_out_ap_vld;
reg g_3_out_ap_vld;
reg f_3_out_ap_vld;
reg e_3_out_ap_vld;
reg d_1_out_ap_vld;
reg c_3_out_ap_vld;
reg b_3_out_ap_vld;
reg a_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln682_reg_1020;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln682_fu_449_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w_strm14_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln682_reg_1020_pp0_iter1_reg;
wire   [5:0] trunc_ln600_fu_461_p1;
reg   [5:0] trunc_ln600_reg_1024;
reg   [5:0] trunc_ln600_reg_1024_pp0_iter1_reg;
reg   [31:0] tmp_reg_1029;
reg   [31:0] c_4_fu_246;
wire    ap_loop_init;
reg   [31:0] d_1_fu_250;
reg   [31:0] g_4_fu_254;
reg   [31:0] h_1_fu_258;
reg   [31:0] Kt_fu_262;
wire   [31:0] Kt_1_fu_751_p66;
reg   [6:0] t_fu_266;
wire   [6:0] add_ln600_fu_455_p2;
reg   [6:0] ap_sig_allocacmp_t_2;
reg   [31:0] b_3_fu_270;
wire   [31:0] a_5_fu_740_p2;
reg   [31:0] d_4_fu_274;
reg   [31:0] f_3_fu_278;
wire   [31:0] e_5_fu_728_p2;
reg   [31:0] h_4_fu_282;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] trunc_ln580_fu_511_p1;
wire   [25:0] lshr_ln_fu_501_p4;
wire   [10:0] trunc_ln580_3_fu_533_p1;
wire   [20:0] lshr_ln580_1_fu_523_p4;
wire   [24:0] trunc_ln580_4_fu_555_p1;
wire   [6:0] lshr_ln580_2_fu_545_p4;
wire   [31:0] or_ln_fu_515_p3;
wire   [31:0] or_ln580_1_fu_537_p3;
wire   [31:0] xor_ln580_fu_567_p2;
wire   [31:0] or_ln580_2_fu_559_p3;
wire   [31:0] xor_ln580_2_fu_585_p2;
wire   [31:0] and_ln580_fu_579_p2;
wire   [31:0] and_ln580_1_fu_591_p2;
wire   [31:0] add_ln580_1_fu_603_p2;
wire   [31:0] xor_ln580_1_fu_573_p2;
wire   [31:0] xor_ln580_3_fu_597_p2;
wire   [31:0] add_ln580_fu_615_p2;
wire   [31:0] add_ln580_2_fu_609_p2;
wire   [1:0] trunc_ln581_fu_636_p1;
wire   [29:0] lshr_ln1_fu_626_p4;
wire   [12:0] trunc_ln581_3_fu_658_p1;
wire   [18:0] lshr_ln581_1_fu_648_p4;
wire   [21:0] trunc_ln581_4_fu_680_p1;
wire   [9:0] lshr_ln581_2_fu_670_p4;
wire   [31:0] or_ln1_fu_640_p3;
wire   [31:0] or_ln581_1_fu_662_p3;
wire   [31:0] xor_ln581_fu_692_p2;
wire   [31:0] or_ln581_2_fu_684_p3;
wire   [31:0] xor_ln581_2_fu_704_p2;
wire   [31:0] and_ln581_fu_710_p2;
wire   [31:0] and_ln581_1_fu_716_p2;
wire   [31:0] T1_fu_620_p2;
wire   [31:0] xor_ln581_3_fu_722_p2;
wire   [31:0] add_ln591_fu_734_p2;
wire   [31:0] xor_ln581_1_fu_698_p2;
wire   [5:0] Kt_1_fu_751_p65;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

hmac_sha256_mux_646_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_646_32_1_1_U280(
    .din0(32'd1116352408),
    .din1(32'd1899447441),
    .din2(32'd3049323471),
    .din3(32'd3921009573),
    .din4(32'd961987163),
    .din5(32'd1508970993),
    .din6(32'd2453635748),
    .din7(32'd2870763221),
    .din8(32'd3624381080),
    .din9(32'd310598401),
    .din10(32'd607225278),
    .din11(32'd1426881987),
    .din12(32'd1925078388),
    .din13(32'd2162078206),
    .din14(32'd2614888103),
    .din15(32'd3248222580),
    .din16(32'd3835390401),
    .din17(32'd4022224774),
    .din18(32'd264347078),
    .din19(32'd604807628),
    .din20(32'd770255983),
    .din21(32'd1249150122),
    .din22(32'd1555081692),
    .din23(32'd1996064986),
    .din24(32'd2554220882),
    .din25(32'd2821834349),
    .din26(32'd2952996808),
    .din27(32'd3210313671),
    .din28(32'd3336571891),
    .din29(32'd3584528711),
    .din30(32'd113926993),
    .din31(32'd338241895),
    .din32(32'd666307205),
    .din33(32'd773529912),
    .din34(32'd1294757372),
    .din35(32'd1396182291),
    .din36(32'd1695183700),
    .din37(32'd1986661051),
    .din38(32'd2177026350),
    .din39(32'd2456956037),
    .din40(32'd2730485921),
    .din41(32'd2820302411),
    .din42(32'd3259730800),
    .din43(32'd3345764771),
    .din44(32'd3516065817),
    .din45(32'd3600352804),
    .din46(32'd4094571909),
    .din47(32'd275423344),
    .din48(32'd430227734),
    .din49(32'd506948616),
    .din50(32'd659060556),
    .din51(32'd883997877),
    .din52(32'd958139571),
    .din53(32'd1322822218),
    .din54(32'd1537002063),
    .din55(32'd1747873779),
    .din56(32'd1955562222),
    .din57(32'd2024104815),
    .din58(32'd2227730452),
    .din59(32'd2361852424),
    .din60(32'd2428436474),
    .din61(32'd2756734187),
    .din62(32'd3204031479),
    .din63(32'd3329325298),
    .din64(Kt_1_fu_751_p65),
    .dout(Kt_1_fu_751_p66)
);

hmac_sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            Kt_fu_262 <= 32'd1116352408;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            Kt_fu_262 <= Kt_1_fu_751_p66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            b_3_fu_270 <= a;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            b_3_fu_270 <= a_5_fu_740_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_4_fu_246 <= b;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            c_4_fu_246 <= b_3_fu_270;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            d_1_fu_250 <= d;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            d_1_fu_250 <= d_4_fu_274;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            d_4_fu_274 <= c;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            d_4_fu_274 <= c_4_fu_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            f_3_fu_278 <= e;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            f_3_fu_278 <= e_5_fu_728_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            g_4_fu_254 <= f;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            g_4_fu_254 <= f_3_fu_278;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            h_1_fu_258 <= h;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            h_1_fu_258 <= h_4_fu_282;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            h_4_fu_282 <= g;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd0))) begin
            h_4_fu_282 <= g_4_fu_254;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln682_fu_449_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_fu_266 <= add_ln600_fu_455_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_266 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln682_reg_1020 <= icmp_ln682_fu_449_p2;
        icmp_ln682_reg_1020_pp0_iter1_reg <= icmp_ln682_reg_1020;
        trunc_ln600_reg_1024_pp0_iter1_reg <= trunc_ln600_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_1029 <= w_strm14_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln682_fu_449_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln600_reg_1024 <= trunc_ln600_fu_461_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        a_3_out_ap_vld = 1'b1;
    end else begin
        a_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln682_fu_449_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_t_2 = t_fu_266;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        b_3_out_ap_vld = 1'b1;
    end else begin
        b_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        c_3_out_ap_vld = 1'b1;
    end else begin
        c_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        d_1_out_ap_vld = 1'b1;
    end else begin
        d_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        e_3_out_ap_vld = 1'b1;
    end else begin
        e_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        f_3_out_ap_vld = 1'b1;
    end else begin
        f_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        g_3_out_ap_vld = 1'b1;
    end else begin
        g_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020_pp0_iter1_reg == 1'd1))) begin
        h_1_out_ap_vld = 1'b1;
    end else begin
        h_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln682_reg_1020 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_strm14_blk_n = w_strm14_empty_n;
    end else begin
        w_strm14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln682_reg_1020 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_strm14_read = 1'b1;
    end else begin
        w_strm14_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Kt_1_fu_751_p65 = (trunc_ln600_reg_1024_pp0_iter1_reg + 6'd1);

assign T1_fu_620_p2 = (add_ln580_fu_615_p2 + add_ln580_2_fu_609_p2);

assign a_3_out = b_3_fu_270;

assign a_5_fu_740_p2 = (add_ln591_fu_734_p2 + xor_ln581_1_fu_698_p2);

assign add_ln580_1_fu_603_p2 = (Kt_fu_262 + h_1_fu_258);

assign add_ln580_2_fu_609_p2 = (add_ln580_1_fu_603_p2 + xor_ln580_1_fu_573_p2);

assign add_ln580_fu_615_p2 = (xor_ln580_3_fu_597_p2 + tmp_reg_1029);

assign add_ln591_fu_734_p2 = (T1_fu_620_p2 + xor_ln581_3_fu_722_p2);

assign add_ln600_fu_455_p2 = (ap_sig_allocacmp_t_2 + 7'd1);

assign and_ln580_1_fu_591_p2 = (xor_ln580_2_fu_585_p2 & h_4_fu_282);

assign and_ln580_fu_579_p2 = (g_4_fu_254 & f_3_fu_278);

assign and_ln581_1_fu_716_p2 = (d_4_fu_274 & c_4_fu_246);

assign and_ln581_fu_710_p2 = (xor_ln581_2_fu_704_p2 & b_3_fu_270);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln682_reg_1020 == 1'd0) & (w_strm14_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln682_reg_1020 == 1'd0) & (w_strm14_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln682_reg_1020 == 1'd0) & (w_strm14_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln682_reg_1020 == 1'd0) & (w_strm14_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_3_out = c_4_fu_246;

assign c_3_out = d_4_fu_274;

assign d_1_out = d_1_fu_250;

assign e_3_out = f_3_fu_278;

assign e_5_fu_728_p2 = (T1_fu_620_p2 + d_1_fu_250);

assign f_3_out = g_4_fu_254;

assign g_3_out = h_4_fu_282;

assign h_1_out = h_1_fu_258;

assign icmp_ln682_fu_449_p2 = ((ap_sig_allocacmp_t_2 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_626_p4 = {{b_3_fu_270[31:2]}};

assign lshr_ln580_1_fu_523_p4 = {{f_3_fu_278[31:11]}};

assign lshr_ln580_2_fu_545_p4 = {{f_3_fu_278[31:25]}};

assign lshr_ln581_1_fu_648_p4 = {{b_3_fu_270[31:13]}};

assign lshr_ln581_2_fu_670_p4 = {{b_3_fu_270[31:22]}};

assign lshr_ln_fu_501_p4 = {{f_3_fu_278[31:6]}};

assign or_ln1_fu_640_p3 = {{trunc_ln581_fu_636_p1}, {lshr_ln1_fu_626_p4}};

assign or_ln580_1_fu_537_p3 = {{trunc_ln580_3_fu_533_p1}, {lshr_ln580_1_fu_523_p4}};

assign or_ln580_2_fu_559_p3 = {{trunc_ln580_4_fu_555_p1}, {lshr_ln580_2_fu_545_p4}};

assign or_ln581_1_fu_662_p3 = {{trunc_ln581_3_fu_658_p1}, {lshr_ln581_1_fu_648_p4}};

assign or_ln581_2_fu_684_p3 = {{trunc_ln581_4_fu_680_p1}, {lshr_ln581_2_fu_670_p4}};

assign or_ln_fu_515_p3 = {{trunc_ln580_fu_511_p1}, {lshr_ln_fu_501_p4}};

assign trunc_ln580_3_fu_533_p1 = f_3_fu_278[10:0];

assign trunc_ln580_4_fu_555_p1 = f_3_fu_278[24:0];

assign trunc_ln580_fu_511_p1 = f_3_fu_278[5:0];

assign trunc_ln581_3_fu_658_p1 = b_3_fu_270[12:0];

assign trunc_ln581_4_fu_680_p1 = b_3_fu_270[21:0];

assign trunc_ln581_fu_636_p1 = b_3_fu_270[1:0];

assign trunc_ln600_fu_461_p1 = ap_sig_allocacmp_t_2[5:0];

assign xor_ln580_1_fu_573_p2 = (xor_ln580_fu_567_p2 ^ or_ln580_2_fu_559_p3);

assign xor_ln580_2_fu_585_p2 = (f_3_fu_278 ^ 32'd4294967295);

assign xor_ln580_3_fu_597_p2 = (and_ln580_fu_579_p2 ^ and_ln580_1_fu_591_p2);

assign xor_ln580_fu_567_p2 = (or_ln_fu_515_p3 ^ or_ln580_1_fu_537_p3);

assign xor_ln581_1_fu_698_p2 = (xor_ln581_fu_692_p2 ^ or_ln581_2_fu_684_p3);

assign xor_ln581_2_fu_704_p2 = (d_4_fu_274 ^ c_4_fu_246);

assign xor_ln581_3_fu_722_p2 = (and_ln581_fu_710_p2 ^ and_ln581_1_fu_716_p2);

assign xor_ln581_fu_692_p2 = (or_ln581_1_fu_662_p3 ^ or_ln1_fu_640_p3);

endmodule //hmac_sha256_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS
