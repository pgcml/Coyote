// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_hmacDataflow_32_64_256_32_64_sha256_wrapper_s (
        keyStrm_TDATA,
        msgStrm_TDATA,
        lenStrm_TDATA,
        eLenStrm_TDATA,
        hshStrm_TDATA,
        eHshStrm_TDATA,
        ap_clk,
        ap_rst,
        keyStrm_TVALID,
        keyStrm_TREADY,
        eLenStrm_TVALID,
        eLenStrm_TREADY,
        ap_start,
        msgStrm_TVALID,
        msgStrm_TREADY,
        lenStrm_TVALID,
        lenStrm_TREADY,
        hshStrm_TVALID,
        hshStrm_TREADY,
        eHshStrm_TVALID,
        eHshStrm_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] keyStrm_TDATA;
input  [31:0] msgStrm_TDATA;
input  [63:0] lenStrm_TDATA;
input  [7:0] eLenStrm_TDATA;
output  [255:0] hshStrm_TDATA;
output  [7:0] eHshStrm_TDATA;
input   ap_clk;
input   ap_rst;
input   keyStrm_TVALID;
output   keyStrm_TREADY;
input   eLenStrm_TVALID;
output   eLenStrm_TREADY;
input   ap_start;
input   msgStrm_TVALID;
output   msgStrm_TREADY;
input   lenStrm_TVALID;
output   lenStrm_TREADY;
output   hshStrm_TVALID;
input   hshStrm_TREADY;
output   eHshStrm_TVALID;
input   eHshStrm_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    kpad_32_64_256_32_64_sha256_wrapper_U0_ap_start;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_ap_done;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_ap_continue;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_ap_idle;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_ap_ready;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_keyStrm_TREADY;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_eLenStrm_TREADY;
wire   [511:0] kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_din;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_write;
wire   [511:0] kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_din;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_write;
wire   [0:0] kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_din;
wire    kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_write;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_read;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_read;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_read;
wire   [511:0] msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_din;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_write;
wire   [255:0] msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_din;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_write;
wire   [0:0] msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_din;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_write;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_msgStrm_TREADY;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_lenStrm_TREADY;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_done;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_ready;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle;
wire    msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue;
reg    ap_sync_reg_msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_read;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_read;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_read;
wire   [255:0] resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TDATA;
wire   [7:0] resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TDATA;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TVALID;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TVALID;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_ap_done;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_ap_ready;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle;
wire    resHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue;
reg    ap_sync_reg_resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start;
wire    kipadStrm_full_n;
wire   [511:0] kipadStrm_dout;
wire   [2:0] kipadStrm_num_data_valid;
wire   [2:0] kipadStrm_fifo_cap;
wire    kipadStrm_empty_n;
wire    kopadStrm_full_n;
wire   [511:0] kopadStrm_dout;
wire   [2:0] kopadStrm_num_data_valid;
wire   [2:0] kopadStrm_fifo_cap;
wire    kopadStrm_empty_n;
wire    eKipadStrm_full_n;
wire   [0:0] eKipadStrm_dout;
wire   [2:0] eKipadStrm_num_data_valid;
wire   [2:0] eKipadStrm_fifo_cap;
wire    eKipadStrm_empty_n;
wire    kopad2Strm_full_n;
wire   [511:0] kopad2Strm_dout;
wire   [2:0] kopad2Strm_num_data_valid;
wire   [2:0] kopad2Strm_fifo_cap;
wire    kopad2Strm_empty_n;
wire    msgHashStrm_full_n;
wire   [255:0] msgHashStrm_dout;
wire   [2:0] msgHashStrm_num_data_valid;
wire   [2:0] msgHashStrm_fifo_cap;
wire    msgHashStrm_empty_n;
wire    eMsgHashStrm_full_n;
wire   [0:0] eMsgHashStrm_dout;
wire   [2:0] eMsgHashStrm_num_data_valid;
wire   [2:0] eMsgHashStrm_fifo_cap;
wire    eMsgHashStrm_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start = 1'b0;
#0 ap_sync_reg_resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start = 1'b0;
end

hmac_sha256_kpad_32_64_256_32_64_sha256_wrapper_s kpad_32_64_256_32_64_sha256_wrapper_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(kpad_32_64_256_32_64_sha256_wrapper_U0_ap_start),
    .ap_done(kpad_32_64_256_32_64_sha256_wrapper_U0_ap_done),
    .ap_continue(kpad_32_64_256_32_64_sha256_wrapper_U0_ap_continue),
    .ap_idle(kpad_32_64_256_32_64_sha256_wrapper_U0_ap_idle),
    .ap_ready(kpad_32_64_256_32_64_sha256_wrapper_U0_ap_ready),
    .keyStrm_TDATA(keyStrm_TDATA),
    .keyStrm_TVALID(keyStrm_TVALID),
    .keyStrm_TREADY(kpad_32_64_256_32_64_sha256_wrapper_U0_keyStrm_TREADY),
    .eLenStrm_TDATA(eLenStrm_TDATA),
    .eLenStrm_TVALID(eLenStrm_TVALID),
    .eLenStrm_TREADY(kpad_32_64_256_32_64_sha256_wrapper_U0_eLenStrm_TREADY),
    .kipadStrm7_din(kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_din),
    .kipadStrm7_num_data_valid(kipadStrm_num_data_valid),
    .kipadStrm7_fifo_cap(kipadStrm_fifo_cap),
    .kipadStrm7_full_n(kipadStrm_full_n),
    .kipadStrm7_write(kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_write),
    .kopadStrm8_din(kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_din),
    .kopadStrm8_num_data_valid(kopadStrm_num_data_valid),
    .kopadStrm8_fifo_cap(kopadStrm_fifo_cap),
    .kopadStrm8_full_n(kopadStrm_full_n),
    .kopadStrm8_write(kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_write),
    .eKipadStrm6_din(kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_din),
    .eKipadStrm6_num_data_valid(eKipadStrm_num_data_valid),
    .eKipadStrm6_fifo_cap(eKipadStrm_fifo_cap),
    .eKipadStrm6_full_n(eKipadStrm_full_n),
    .eKipadStrm6_write(kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_write)
);

hmac_sha256_msgHash_32_64_256_32_64_sha256_wrapper_s msgHash_32_64_256_32_64_sha256_wrapper_U0(
    .kipadStrm7_dout(kipadStrm_dout),
    .kipadStrm7_empty_n(kipadStrm_empty_n),
    .kipadStrm7_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_read),
    .kopadStrm8_dout(kopadStrm_dout),
    .kopadStrm8_empty_n(kopadStrm_empty_n),
    .kopadStrm8_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_read),
    .msgStrm_TDATA(msgStrm_TDATA),
    .lenStrm_TDATA(lenStrm_TDATA),
    .eKipadStrm6_dout(eKipadStrm_dout),
    .eKipadStrm6_empty_n(eKipadStrm_empty_n),
    .eKipadStrm6_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_read),
    .kopad2Strm9_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_din),
    .kopad2Strm9_full_n(kopad2Strm_full_n),
    .kopad2Strm9_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_write),
    .msgHashStrm10_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_din),
    .msgHashStrm10_full_n(msgHashStrm_full_n),
    .msgHashStrm10_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_write),
    .eMsgHashStrm11_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_din),
    .eMsgHashStrm11_full_n(eMsgHashStrm_full_n),
    .eMsgHashStrm11_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .msgStrm_TVALID(msgStrm_TVALID),
    .msgStrm_TREADY(msgHash_32_64_256_32_64_sha256_wrapper_U0_msgStrm_TREADY),
    .lenStrm_TVALID(lenStrm_TVALID),
    .lenStrm_TREADY(msgHash_32_64_256_32_64_sha256_wrapper_U0_lenStrm_TREADY),
    .ap_start(msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start),
    .ap_done(msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_done),
    .ap_ready(msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_ready),
    .ap_idle(msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle),
    .ap_continue(msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue)
);

hmac_sha256_resHash_32_64_256_32_64_sha256_wrapper_s resHash_32_64_256_32_64_sha256_wrapper_U0(
    .kopad2Strm9_dout(kopad2Strm_dout),
    .kopad2Strm9_empty_n(kopad2Strm_empty_n),
    .kopad2Strm9_read(resHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_read),
    .msgHashStrm10_dout(msgHashStrm_dout),
    .msgHashStrm10_empty_n(msgHashStrm_empty_n),
    .msgHashStrm10_read(resHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_read),
    .eMsgHashStrm11_dout(eMsgHashStrm_dout),
    .eMsgHashStrm11_empty_n(eMsgHashStrm_empty_n),
    .eMsgHashStrm11_read(resHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_read),
    .hshStrm_TDATA(resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TDATA),
    .eHshStrm_TDATA(resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start),
    .hshStrm_TVALID(resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TVALID),
    .hshStrm_TREADY(hshStrm_TREADY),
    .eHshStrm_TVALID(resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TVALID),
    .eHshStrm_TREADY(eHshStrm_TREADY),
    .ap_done(resHash_32_64_256_32_64_sha256_wrapper_U0_ap_done),
    .ap_ready(resHash_32_64_256_32_64_sha256_wrapper_U0_ap_ready),
    .ap_idle(resHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle),
    .ap_continue(resHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue)
);

hmac_sha256_fifo_w512_d4_D kipadStrm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_din),
    .if_full_n(kipadStrm_full_n),
    .if_write(kpad_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_write),
    .if_dout(kipadStrm_dout),
    .if_num_data_valid(kipadStrm_num_data_valid),
    .if_fifo_cap(kipadStrm_fifo_cap),
    .if_empty_n(kipadStrm_empty_n),
    .if_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_kipadStrm7_read)
);

hmac_sha256_fifo_w512_d4_D kopadStrm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_din),
    .if_full_n(kopadStrm_full_n),
    .if_write(kpad_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_write),
    .if_dout(kopadStrm_dout),
    .if_num_data_valid(kopadStrm_num_data_valid),
    .if_fifo_cap(kopadStrm_fifo_cap),
    .if_empty_n(kopadStrm_empty_n),
    .if_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopadStrm8_read)
);

hmac_sha256_fifo_w1_d4_D_x0 eKipadStrm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_din),
    .if_full_n(eKipadStrm_full_n),
    .if_write(kpad_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_write),
    .if_dout(eKipadStrm_dout),
    .if_num_data_valid(eKipadStrm_num_data_valid),
    .if_fifo_cap(eKipadStrm_fifo_cap),
    .if_empty_n(eKipadStrm_empty_n),
    .if_read(msgHash_32_64_256_32_64_sha256_wrapper_U0_eKipadStrm6_read)
);

hmac_sha256_fifo_w512_d4_D kopad2Strm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_din),
    .if_full_n(kopad2Strm_full_n),
    .if_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_write),
    .if_dout(kopad2Strm_dout),
    .if_num_data_valid(kopad2Strm_num_data_valid),
    .if_fifo_cap(kopad2Strm_fifo_cap),
    .if_empty_n(kopad2Strm_empty_n),
    .if_read(resHash_32_64_256_32_64_sha256_wrapper_U0_kopad2Strm9_read)
);

hmac_sha256_fifo_w256_d4_D msgHashStrm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_din),
    .if_full_n(msgHashStrm_full_n),
    .if_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_write),
    .if_dout(msgHashStrm_dout),
    .if_num_data_valid(msgHashStrm_num_data_valid),
    .if_fifo_cap(msgHashStrm_fifo_cap),
    .if_empty_n(msgHashStrm_empty_n),
    .if_read(resHash_32_64_256_32_64_sha256_wrapper_U0_msgHashStrm10_read)
);

hmac_sha256_fifo_w1_d4_D_x0 eMsgHashStrm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_din),
    .if_full_n(eMsgHashStrm_full_n),
    .if_write(msgHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_write),
    .if_dout(eMsgHashStrm_dout),
    .if_num_data_valid(eMsgHashStrm_num_data_valid),
    .if_fifo_cap(eMsgHashStrm_fifo_cap),
    .if_empty_n(eMsgHashStrm_empty_n),
    .if_read(resHash_32_64_256_32_64_sha256_wrapper_U0_eMsgHashStrm11_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start <= 1'b0;
    end else begin
        if ((ap_start == 1'b1)) begin
            ap_sync_reg_msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start <= 1'b0;
    end else begin
        if ((ap_start == 1'b1)) begin
            ap_sync_reg_resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start <= 1'b1;
        end
    end
end

assign ap_done = resHash_32_64_256_32_64_sha256_wrapper_U0_ap_done;

assign ap_idle = (resHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle & msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_idle & kpad_32_64_256_32_64_sha256_wrapper_U0_ap_idle);

assign ap_ready = kpad_32_64_256_32_64_sha256_wrapper_U0_ap_ready;

assign eHshStrm_TDATA = resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TDATA;

assign eHshStrm_TVALID = resHash_32_64_256_32_64_sha256_wrapper_U0_eHshStrm_TVALID;

assign eLenStrm_TREADY = kpad_32_64_256_32_64_sha256_wrapper_U0_eLenStrm_TREADY;

assign hshStrm_TDATA = resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TDATA;

assign hshStrm_TVALID = resHash_32_64_256_32_64_sha256_wrapper_U0_hshStrm_TVALID;

assign keyStrm_TREADY = kpad_32_64_256_32_64_sha256_wrapper_U0_keyStrm_TREADY;

assign kpad_32_64_256_32_64_sha256_wrapper_U0_ap_continue = 1'b1;

assign kpad_32_64_256_32_64_sha256_wrapper_U0_ap_start = ap_start;

assign lenStrm_TREADY = msgHash_32_64_256_32_64_sha256_wrapper_U0_lenStrm_TREADY;

assign msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue = 1'b1;

assign msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start = (ap_sync_reg_msgHash_32_64_256_32_64_sha256_wrapper_U0_ap_start | ap_start);

assign msgStrm_TREADY = msgHash_32_64_256_32_64_sha256_wrapper_U0_msgStrm_TREADY;

assign resHash_32_64_256_32_64_sha256_wrapper_U0_ap_continue = ap_continue;

assign resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start = (ap_sync_reg_resHash_32_64_256_32_64_sha256_wrapper_U0_ap_start | ap_start);

endmodule //hmac_sha256_hmacDataflow_32_64_256_32_64_sha256_wrapper_s
