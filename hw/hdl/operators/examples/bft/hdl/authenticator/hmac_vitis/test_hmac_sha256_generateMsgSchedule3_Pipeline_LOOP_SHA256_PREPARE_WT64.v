// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_hmac_sha256_generateMsgSchedule3_Pipeline_LOOP_SHA256_PREPARE_WT64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_strm14_din,
        w_strm14_num_data_valid,
        w_strm14_fifo_cap,
        w_strm14_full_n,
        w_strm14_write,
        W_reload,
        W_2_reload,
        W_3_reload,
        W_4_reload,
        W_5_reload,
        W_7_reload,
        W_8_reload,
        W_9_reload,
        W_10_reload,
        W_11_reload,
        W_12_reload,
        W_13_reload,
        W_15_reload,
        W_14_reload,
        W_6_reload,
        W_1_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] w_strm14_din;
input  [5:0] w_strm14_num_data_valid;
input  [5:0] w_strm14_fifo_cap;
input   w_strm14_full_n;
output   w_strm14_write;
input  [31:0] W_reload;
input  [31:0] W_2_reload;
input  [31:0] W_3_reload;
input  [31:0] W_4_reload;
input  [31:0] W_5_reload;
input  [31:0] W_7_reload;
input  [31:0] W_8_reload;
input  [31:0] W_9_reload;
input  [31:0] W_10_reload;
input  [31:0] W_11_reload;
input  [31:0] W_12_reload;
input  [31:0] W_13_reload;
input  [31:0] W_15_reload;
input  [31:0] W_14_reload;
input  [31:0] W_6_reload;
input  [31:0] W_1_reload;

reg ap_idle;
reg w_strm14_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln549_fu_406_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w_strm14_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] Wt_2_fu_573_p2;
reg   [31:0] Wt_2_reg_792;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] empty_fu_108;
wire    ap_loop_init;
reg   [31:0] empty_152_fu_112;
reg   [31:0] empty_153_fu_116;
reg   [6:0] t_1_fu_120;
wire   [6:0] add_ln549_fu_579_p2;
reg   [31:0] empty_154_fu_124;
reg   [31:0] empty_155_fu_128;
reg   [31:0] empty_156_fu_132;
reg   [31:0] empty_157_fu_136;
reg   [31:0] empty_158_fu_140;
reg   [31:0] empty_159_fu_144;
reg   [31:0] empty_160_fu_148;
reg   [31:0] empty_161_fu_152;
reg   [31:0] empty_162_fu_156;
reg   [31:0] empty_163_fu_160;
reg   [31:0] empty_164_fu_164;
reg   [31:0] empty_165_fu_168;
reg   [31:0] Wt_fu_172;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] trunc_ln553_fu_431_p1;
wire   [14:0] lshr_ln_fu_421_p4;
wire   [18:0] trunc_ln553_4_fu_453_p1;
wire   [12:0] lshr_ln553_1_fu_443_p4;
wire   [21:0] lshr_ln553_2_fu_465_p4;
wire   [31:0] or_ln_fu_435_p3;
wire   [31:0] zext_ln553_fu_475_p1;
wire   [31:0] xor_ln553_fu_479_p2;
wire   [31:0] or_ln553_1_fu_457_p3;
wire   [6:0] trunc_ln553_5_fu_501_p1;
wire   [24:0] lshr_ln553_3_fu_491_p4;
wire   [17:0] trunc_ln553_6_fu_523_p1;
wire   [13:0] lshr_ln553_4_fu_513_p4;
wire   [28:0] lshr_ln553_5_fu_535_p4;
wire   [31:0] zext_ln553_1_fu_545_p1;
wire   [31:0] or_ln553_3_fu_527_p3;
wire   [31:0] xor_ln553_2_fu_549_p2;
wire   [31:0] or_ln553_2_fu_505_p3;
wire   [31:0] xor_ln553_3_fu_555_p2;
wire   [31:0] xor_ln553_1_fu_485_p2;
wire   [31:0] add_ln553_1_fu_567_p2;
wire   [31:0] add_ln553_fu_561_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_hmac_sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            Wt_fu_172 <= W_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            Wt_fu_172 <= Wt_2_fu_573_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_152_fu_112 <= W_6_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_152_fu_112 <= empty_162_fu_156;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_153_fu_116 <= W_15_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_153_fu_116 <= empty_154_fu_124;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_154_fu_124 <= W_14_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_154_fu_124 <= empty_155_fu_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_155_fu_128 <= W_13_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_155_fu_128 <= empty_156_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_156_fu_132 <= W_12_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_156_fu_132 <= empty_157_fu_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_157_fu_136 <= W_11_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_157_fu_136 <= empty_158_fu_140;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_158_fu_140 <= W_10_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_158_fu_140 <= empty_159_fu_144;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_159_fu_144 <= W_9_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_159_fu_144 <= empty_160_fu_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_160_fu_148 <= W_8_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_160_fu_148 <= empty_161_fu_152;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_161_fu_152 <= W_7_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_161_fu_152 <= empty_152_fu_112;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_162_fu_156 <= W_5_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_162_fu_156 <= empty_163_fu_160;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_163_fu_160 <= W_4_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_163_fu_160 <= empty_164_fu_164;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_164_fu_164 <= W_3_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_164_fu_164 <= empty_165_fu_168;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_165_fu_168 <= W_2_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_165_fu_168 <= empty_fu_108;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_108 <= W_1_reload;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_fu_108 <= Wt_fu_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            t_1_fu_120 <= 7'd16;
        end else if (((icmp_ln549_fu_406_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            t_1_fu_120 <= add_ln549_fu_579_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln549_fu_406_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Wt_2_reg_792 <= Wt_2_fu_573_p2;
    end
end

always @ (*) begin
    if (((icmp_ln549_fu_406_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        w_strm14_blk_n = w_strm14_full_n;
    end else begin
        w_strm14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        w_strm14_write = 1'b1;
    end else begin
        w_strm14_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Wt_2_fu_573_p2 = (add_ln553_1_fu_567_p2 + add_ln553_fu_561_p2);

assign add_ln549_fu_579_p2 = (t_1_fu_120 + 7'd1);

assign add_ln553_1_fu_567_p2 = (xor_ln553_1_fu_485_p2 + empty_152_fu_112);

assign add_ln553_fu_561_p2 = (empty_153_fu_116 + xor_ln553_3_fu_555_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((w_strm14_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (w_strm14_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln549_fu_406_p2 = ((t_1_fu_120 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln553_1_fu_443_p4 = {{empty_fu_108[31:19]}};

assign lshr_ln553_2_fu_465_p4 = {{empty_fu_108[31:10]}};

assign lshr_ln553_3_fu_491_p4 = {{empty_154_fu_124[31:7]}};

assign lshr_ln553_4_fu_513_p4 = {{empty_154_fu_124[31:18]}};

assign lshr_ln553_5_fu_535_p4 = {{empty_154_fu_124[31:3]}};

assign lshr_ln_fu_421_p4 = {{empty_fu_108[31:17]}};

assign or_ln553_1_fu_457_p3 = {{trunc_ln553_4_fu_453_p1}, {lshr_ln553_1_fu_443_p4}};

assign or_ln553_2_fu_505_p3 = {{trunc_ln553_5_fu_501_p1}, {lshr_ln553_3_fu_491_p4}};

assign or_ln553_3_fu_527_p3 = {{trunc_ln553_6_fu_523_p1}, {lshr_ln553_4_fu_513_p4}};

assign or_ln_fu_435_p3 = {{trunc_ln553_fu_431_p1}, {lshr_ln_fu_421_p4}};

assign trunc_ln553_4_fu_453_p1 = empty_fu_108[18:0];

assign trunc_ln553_5_fu_501_p1 = empty_154_fu_124[6:0];

assign trunc_ln553_6_fu_523_p1 = empty_154_fu_124[17:0];

assign trunc_ln553_fu_431_p1 = empty_fu_108[16:0];

assign w_strm14_din = Wt_2_reg_792;

assign xor_ln553_1_fu_485_p2 = (xor_ln553_fu_479_p2 ^ or_ln553_1_fu_457_p3);

assign xor_ln553_2_fu_549_p2 = (zext_ln553_1_fu_545_p1 ^ or_ln553_3_fu_527_p3);

assign xor_ln553_3_fu_555_p2 = (xor_ln553_2_fu_549_p2 ^ or_ln553_2_fu_505_p3);

assign xor_ln553_fu_479_p2 = (zext_ln553_fu_475_p1 ^ or_ln_fu_435_p3);

assign zext_ln553_1_fu_545_p1 = lshr_ln553_5_fu_535_p4;

assign zext_ln553_fu_475_p1 = lshr_ln553_2_fu_465_p4;

endmodule //test_hmac_sha256_generateMsgSchedule3_Pipeline_LOOP_SHA256_PREPARE_WT64
