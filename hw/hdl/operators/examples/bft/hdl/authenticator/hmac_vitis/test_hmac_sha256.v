// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="test_hmac_sha256_test_hmac_sha256,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.878000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=23044,HLS_SYN_LUT=19556,HLS_VERSION=2022_1}" *)

module test_hmac_sha256 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        keyStrm_dout,
        keyStrm_empty_n,
        keyStrm_read,
        msgStrm_dout,
        msgStrm_empty_n,
        msgStrm_read,
        lenStrm_dout,
        lenStrm_empty_n,
        lenStrm_read,
        eLenStrm_dout,
        eLenStrm_empty_n,
        eLenStrm_read,
        hshStrm_din,
        hshStrm_full_n,
        hshStrm_write,
        eHshStrm_din,
        eHshStrm_full_n,
        eHshStrm_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] keyStrm_dout;
input   keyStrm_empty_n;
output   keyStrm_read;
input  [31:0] msgStrm_dout;
input   msgStrm_empty_n;
output   msgStrm_read;
input  [63:0] lenStrm_dout;
input   lenStrm_empty_n;
output   lenStrm_read;
input  [0:0] eLenStrm_dout;
input   eLenStrm_empty_n;
output   eLenStrm_read;
output  [255:0] hshStrm_din;
input   hshStrm_full_n;
output   hshStrm_write;
output  [0:0] eHshStrm_din;
input   eHshStrm_full_n;
output   eHshStrm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg keyStrm_read;
reg msgStrm_read;
reg lenStrm_read;
reg eLenStrm_read;
reg hshStrm_write;
reg eHshStrm_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_keyStrm_read;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_msgStrm_read;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_lenStrm_read;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eLenStrm_read;
wire   [255:0] grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_din;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_write;
wire   [0:0] grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_din;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_write;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready;
wire    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_idle;
reg    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_continue;
reg    grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready;
wire    ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready;
reg    ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready = 1'b0;
#0 ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done = 1'b0;
end

test_hmac_sha256_hmacDataflow_32_64_256_32_64_sha256_wrapper_s grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30(
    .keyStrm_dout(keyStrm_dout),
    .keyStrm_empty_n(keyStrm_empty_n),
    .keyStrm_read(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_keyStrm_read),
    .msgStrm_dout(msgStrm_dout),
    .msgStrm_empty_n(msgStrm_empty_n),
    .msgStrm_read(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_msgStrm_read),
    .lenStrm_dout(lenStrm_dout),
    .lenStrm_empty_n(lenStrm_empty_n),
    .lenStrm_read(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_lenStrm_read),
    .eLenStrm_dout(eLenStrm_dout),
    .eLenStrm_empty_n(eLenStrm_empty_n),
    .eLenStrm_read(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eLenStrm_read),
    .hshStrm_din(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_din),
    .hshStrm_full_n(hshStrm_full_n),
    .hshStrm_write(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_write),
    .eHshStrm_din(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_din),
    .eHshStrm_full_n(eHshStrm_full_n),
    .eHshStrm_write(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start),
    .ap_done(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done),
    .ap_ready(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready),
    .ap_idle(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_idle),
    .ap_continue(grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done <= 1'b0;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done == 1'b1)) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready <= 1'b0;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg <= 1'b1;
        end else if ((grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready == 1'b1)) begin
            grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eHshStrm_write = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_write;
    end else begin
        eHshStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eLenStrm_read = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eLenStrm_read;
    end else begin
        eLenStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_continue = 1'b1;
    end else begin
        grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hshStrm_write = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_write;
    end else begin
        hshStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        keyStrm_read = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_keyStrm_read;
    end else begin
        keyStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lenStrm_read = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_lenStrm_read;
    end else begin
        lenStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        msgStrm_read = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_msgStrm_read;
    end else begin
        msgStrm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready & ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done) == 1'b0);
end

assign ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done = (grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done | ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_done);

assign ap_sync_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready = (grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready | ap_sync_reg_grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_ready);

assign eHshStrm_din = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_eHshStrm_din;

assign grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_ap_start_reg;

assign hshStrm_din = grp_hmacDataflow_32_64_256_32_64_sha256_wrapper_s_fu_30_hshStrm_din;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "test_hmac_sha256_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //test_hmac_sha256

