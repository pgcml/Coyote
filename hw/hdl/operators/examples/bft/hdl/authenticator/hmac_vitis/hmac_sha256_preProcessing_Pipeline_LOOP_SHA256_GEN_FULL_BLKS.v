// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_preProcessing_Pipeline_LOOP_SHA256_GEN_FULL_BLKS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mergeKopadStrm3_dout,
        mergeKopadStrm3_num_data_valid,
        mergeKopadStrm3_fifo_cap,
        mergeKopadStrm3_empty_n,
        mergeKopadStrm3_read,
        blk_strm_din,
        blk_strm_num_data_valid,
        blk_strm_fifo_cap,
        blk_strm_full_n,
        blk_strm_write,
        trunc_ln
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mergeKopadStrm3_dout;
input  [2:0] mergeKopadStrm3_num_data_valid;
input  [2:0] mergeKopadStrm3_fifo_cap;
input   mergeKopadStrm3_empty_n;
output   mergeKopadStrm3_read;
output  [511:0] blk_strm_din;
input  [5:0] blk_strm_num_data_valid;
input  [5:0] blk_strm_fifo_cap;
input   blk_strm_full_n;
output   blk_strm_write;
input  [57:0] trunc_ln;

reg ap_idle;
reg mergeKopadStrm3_read;
reg blk_strm_write;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln101_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage15;
reg   [0:0] icmp_ln101_reg_290;
reg    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_pp0_stage15_subdone;
reg    mergeKopadStrm3_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg    blk_strm_blk_n;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] empty_fu_141_p1;
reg   [7:0] empty_reg_294;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_87_p4;
reg   [7:0] p_3_reg_299;
wire   [7:0] grp_fu_97_p4;
reg   [7:0] p_1_reg_304;
wire   [7:0] grp_fu_107_p4;
reg   [7:0] p_2_reg_309;
wire   [7:0] empty_63_fu_145_p1;
reg   [7:0] empty_63_reg_314;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [7:0] p_4_reg_319;
reg   [7:0] p_5_reg_324;
reg   [7:0] p_6_reg_329;
wire   [7:0] empty_64_fu_149_p1;
reg   [7:0] empty_64_reg_334;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [7:0] p_7_reg_339;
reg   [7:0] p_8_reg_344;
reg   [7:0] p_9_reg_349;
wire   [7:0] empty_65_fu_153_p1;
reg   [7:0] empty_65_reg_354;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [7:0] p_s_reg_359;
reg   [7:0] p_10_reg_364;
reg   [7:0] p_11_reg_369;
wire   [7:0] empty_66_fu_157_p1;
reg   [7:0] empty_66_reg_374;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [7:0] p_12_reg_379;
reg   [7:0] p_13_reg_384;
reg   [7:0] p_14_reg_389;
wire   [7:0] empty_67_fu_161_p1;
reg   [7:0] empty_67_reg_394;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg   [7:0] p_15_reg_399;
reg   [7:0] p_16_reg_404;
reg   [7:0] p_17_reg_409;
wire   [7:0] empty_68_fu_165_p1;
reg   [7:0] empty_68_reg_414;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
reg   [7:0] p_18_reg_419;
reg   [7:0] p_19_reg_424;
reg   [7:0] p_20_reg_429;
wire   [7:0] empty_69_fu_169_p1;
reg   [7:0] empty_69_reg_434;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg   [7:0] p_21_reg_439;
reg   [7:0] p_22_reg_444;
reg   [7:0] p_23_reg_449;
wire   [7:0] empty_70_fu_173_p1;
reg   [7:0] empty_70_reg_454;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg   [7:0] p_24_reg_459;
reg   [7:0] p_25_reg_464;
reg   [7:0] p_26_reg_469;
wire   [7:0] empty_71_fu_177_p1;
reg   [7:0] empty_71_reg_474;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg   [7:0] p_27_reg_479;
reg   [7:0] p_28_reg_484;
reg   [7:0] p_29_reg_489;
wire   [7:0] empty_72_fu_181_p1;
reg   [7:0] empty_72_reg_494;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
reg   [7:0] p_30_reg_499;
reg   [7:0] p_31_reg_504;
reg   [7:0] p_32_reg_509;
wire   [7:0] empty_73_fu_185_p1;
reg   [7:0] empty_73_reg_514;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_11001;
reg   [7:0] p_33_reg_519;
reg   [7:0] p_34_reg_524;
reg   [7:0] p_35_reg_529;
wire   [7:0] empty_74_fu_189_p1;
reg   [7:0] empty_74_reg_534;
reg    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_pp0_stage14_11001;
reg   [7:0] p_36_reg_539;
reg   [7:0] p_37_reg_544;
reg   [7:0] p_38_reg_549;
wire   [7:0] empty_75_fu_193_p1;
reg   [7:0] empty_75_reg_554;
reg    ap_block_pp0_stage15_11001;
reg   [7:0] p_39_reg_559;
reg   [7:0] p_40_reg_564;
reg   [7:0] p_41_reg_569;
wire   [7:0] empty_76_fu_197_p1;
reg   [7:0] empty_76_reg_574;
reg   [7:0] p_42_reg_579;
reg   [7:0] p_43_reg_584;
reg   [7:0] p_44_reg_589;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [57:0] j_fu_64;
wire   [57:0] j_2_fu_130_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage1_01001;
wire   [7:0] empty_77_fu_201_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

hmac_sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_64 <= 58'd0;
    end else if (((icmp_ln101_fu_125_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_64 <= j_2_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        empty_63_reg_314 <= empty_63_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        empty_64_reg_334 <= empty_64_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        empty_65_reg_354 <= empty_65_fu_153_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        empty_66_reg_374 <= empty_66_fu_157_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        empty_67_reg_394 <= empty_67_fu_161_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        empty_68_reg_414 <= empty_68_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        empty_69_reg_434 <= empty_69_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        empty_70_reg_454 <= empty_70_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        empty_71_reg_474 <= empty_71_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        empty_72_reg_494 <= empty_72_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        empty_73_reg_514 <= empty_73_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        empty_74_reg_534 <= empty_74_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        empty_75_reg_554 <= empty_75_fu_193_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_76_reg_574 <= empty_76_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        empty_reg_294 <= empty_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln101_reg_290 <= icmp_ln101_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        p_10_reg_364 <= {{mergeKopadStrm3_dout[15:8]}};
        p_11_reg_369 <= {{mergeKopadStrm3_dout[23:16]}};
        p_s_reg_359 <= {{mergeKopadStrm3_dout[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_12_reg_379 <= {{mergeKopadStrm3_dout[31:24]}};
        p_13_reg_384 <= {{mergeKopadStrm3_dout[15:8]}};
        p_14_reg_389 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        p_15_reg_399 <= {{mergeKopadStrm3_dout[31:24]}};
        p_16_reg_404 <= {{mergeKopadStrm3_dout[15:8]}};
        p_17_reg_409 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        p_18_reg_419 <= {{mergeKopadStrm3_dout[31:24]}};
        p_19_reg_424 <= {{mergeKopadStrm3_dout[15:8]}};
        p_20_reg_429 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_1_reg_304 <= {{mergeKopadStrm3_dout[15:8]}};
        p_2_reg_309 <= {{mergeKopadStrm3_dout[23:16]}};
        p_3_reg_299 <= {{mergeKopadStrm3_dout[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        p_21_reg_439 <= {{mergeKopadStrm3_dout[31:24]}};
        p_22_reg_444 <= {{mergeKopadStrm3_dout[15:8]}};
        p_23_reg_449 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        p_24_reg_459 <= {{mergeKopadStrm3_dout[31:24]}};
        p_25_reg_464 <= {{mergeKopadStrm3_dout[15:8]}};
        p_26_reg_469 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        p_27_reg_479 <= {{mergeKopadStrm3_dout[31:24]}};
        p_28_reg_484 <= {{mergeKopadStrm3_dout[15:8]}};
        p_29_reg_489 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        p_30_reg_499 <= {{mergeKopadStrm3_dout[31:24]}};
        p_31_reg_504 <= {{mergeKopadStrm3_dout[15:8]}};
        p_32_reg_509 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        p_33_reg_519 <= {{mergeKopadStrm3_dout[31:24]}};
        p_34_reg_524 <= {{mergeKopadStrm3_dout[15:8]}};
        p_35_reg_529 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        p_36_reg_539 <= {{mergeKopadStrm3_dout[31:24]}};
        p_37_reg_544 <= {{mergeKopadStrm3_dout[15:8]}};
        p_38_reg_549 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        p_39_reg_559 <= {{mergeKopadStrm3_dout[31:24]}};
        p_40_reg_564 <= {{mergeKopadStrm3_dout[15:8]}};
        p_41_reg_569 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_42_reg_579 <= {{mergeKopadStrm3_dout[31:24]}};
        p_43_reg_584 <= {{mergeKopadStrm3_dout[15:8]}};
        p_44_reg_589 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_4_reg_319 <= {{mergeKopadStrm3_dout[31:24]}};
        p_5_reg_324 <= {{mergeKopadStrm3_dout[15:8]}};
        p_6_reg_329 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_7_reg_339 <= {{mergeKopadStrm3_dout[31:24]}};
        p_8_reg_344 <= {{mergeKopadStrm3_dout[15:8]}};
        p_9_reg_349 <= {{mergeKopadStrm3_dout[23:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        blk_strm_blk_n = blk_strm_full_n;
    end else begin
        blk_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        blk_strm_write = 1'b1;
    end else begin
        blk_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        mergeKopadStrm3_blk_n = mergeKopadStrm3_empty_n;
    end else begin
        mergeKopadStrm3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln101_reg_290 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        mergeKopadStrm3_read = 1'b1;
    end else begin
        mergeKopadStrm3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (mergeKopadStrm3_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (mergeKopadStrm3_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (mergeKopadStrm3_empty_n == 1'b0)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp0_stage14_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state18_pp0_stage1_iter1 = ((blk_strm_full_n == 1'b0) | (mergeKopadStrm3_empty_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = ((icmp_ln101_reg_290 == 1'd0) & (mergeKopadStrm3_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign blk_strm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{empty_77_fu_201_p1}, {grp_fu_97_p4}}, {grp_fu_107_p4}}, {grp_fu_87_p4}}, {empty_76_reg_574}}, {p_43_reg_584}}, {p_44_reg_589}}, {p_42_reg_579}}, {empty_75_reg_554}}, {p_40_reg_564}}, {p_41_reg_569}}, {p_39_reg_559}}, {empty_74_reg_534}}, {p_37_reg_544}}, {p_38_reg_549}}, {p_36_reg_539}}, {empty_73_reg_514}}, {p_34_reg_524}}, {p_35_reg_529}}, {p_33_reg_519}}, {empty_72_reg_494}}, {p_31_reg_504}}, {p_32_reg_509}}, {p_30_reg_499}}, {empty_71_reg_474}}, {p_28_reg_484}}, {p_29_reg_489}}, {p_27_reg_479}}, {empty_70_reg_454}}, {p_25_reg_464}}, {p_26_reg_469}}, {p_24_reg_459}}, {empty_69_reg_434}}, {p_22_reg_444}}, {p_23_reg_449}}, {p_21_reg_439}}, {empty_68_reg_414}}, {p_19_reg_424}}, {p_20_reg_429}}, {p_18_reg_419}}, {empty_67_reg_394}}, {p_16_reg_404}}, {p_17_reg_409}}, {p_15_reg_399}}, {empty_66_reg_374}}, {p_13_reg_384}}, {p_14_reg_389}}, {p_12_reg_379}}, {empty_65_reg_354}}, {p_10_reg_364}}, {p_11_reg_369}}, {p_s_reg_359}}, {empty_64_reg_334}}, {p_8_reg_344}}, {p_9_reg_349}}, {p_7_reg_339}}, {empty_63_reg_314}}, {p_5_reg_324}}, {p_6_reg_329}}, {p_4_reg_319}}, {empty_reg_294}}, {p_1_reg_304}}, {p_2_reg_309}}, {p_3_reg_299}};

assign empty_63_fu_145_p1 = mergeKopadStrm3_dout[7:0];

assign empty_64_fu_149_p1 = mergeKopadStrm3_dout[7:0];

assign empty_65_fu_153_p1 = mergeKopadStrm3_dout[7:0];

assign empty_66_fu_157_p1 = mergeKopadStrm3_dout[7:0];

assign empty_67_fu_161_p1 = mergeKopadStrm3_dout[7:0];

assign empty_68_fu_165_p1 = mergeKopadStrm3_dout[7:0];

assign empty_69_fu_169_p1 = mergeKopadStrm3_dout[7:0];

assign empty_70_fu_173_p1 = mergeKopadStrm3_dout[7:0];

assign empty_71_fu_177_p1 = mergeKopadStrm3_dout[7:0];

assign empty_72_fu_181_p1 = mergeKopadStrm3_dout[7:0];

assign empty_73_fu_185_p1 = mergeKopadStrm3_dout[7:0];

assign empty_74_fu_189_p1 = mergeKopadStrm3_dout[7:0];

assign empty_75_fu_193_p1 = mergeKopadStrm3_dout[7:0];

assign empty_76_fu_197_p1 = mergeKopadStrm3_dout[7:0];

assign empty_77_fu_201_p1 = mergeKopadStrm3_dout[7:0];

assign empty_fu_141_p1 = mergeKopadStrm3_dout[7:0];

assign grp_fu_107_p4 = {{mergeKopadStrm3_dout[23:16]}};

assign grp_fu_87_p4 = {{mergeKopadStrm3_dout[31:24]}};

assign grp_fu_97_p4 = {{mergeKopadStrm3_dout[15:8]}};

assign icmp_ln101_fu_125_p2 = ((j_fu_64 == trunc_ln) ? 1'b1 : 1'b0);

assign j_2_fu_130_p2 = (j_fu_64 + 58'd1);

endmodule //hmac_sha256_preProcessing_Pipeline_LOOP_SHA256_GEN_FULL_BLKS
