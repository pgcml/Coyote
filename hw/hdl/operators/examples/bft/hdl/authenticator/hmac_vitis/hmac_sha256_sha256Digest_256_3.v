// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_sha256_sha256Digest_256_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        nblk_strm210_dout,
        nblk_strm210_num_data_valid,
        nblk_strm210_fifo_cap,
        nblk_strm210_empty_n,
        nblk_strm210_read,
        end_nblk_strm213_dout,
        end_nblk_strm213_num_data_valid,
        end_nblk_strm213_fifo_cap,
        end_nblk_strm213_empty_n,
        end_nblk_strm213_read,
        w_strm14_dout,
        w_strm14_num_data_valid,
        w_strm14_fifo_cap,
        w_strm14_empty_n,
        w_strm14_read,
        hshStrm_TDATA,
        hshStrm_TVALID,
        hshStrm_TREADY,
        eHshStrm_TDATA,
        eHshStrm_TVALID,
        eHshStrm_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] nblk_strm210_dout;
input  [5:0] nblk_strm210_num_data_valid;
input  [5:0] nblk_strm210_fifo_cap;
input   nblk_strm210_empty_n;
output   nblk_strm210_read;
input  [0:0] end_nblk_strm213_dout;
input  [5:0] end_nblk_strm213_num_data_valid;
input  [5:0] end_nblk_strm213_fifo_cap;
input   end_nblk_strm213_empty_n;
output   end_nblk_strm213_read;
input  [31:0] w_strm14_dout;
input  [5:0] w_strm14_num_data_valid;
input  [5:0] w_strm14_fifo_cap;
input   w_strm14_empty_n;
output   w_strm14_read;
output  [255:0] hshStrm_TDATA;
output   hshStrm_TVALID;
input   hshStrm_TREADY;
output  [7:0] eHshStrm_TDATA;
output   eHshStrm_TVALID;
input   eHshStrm_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nblk_strm210_read;
reg end_nblk_strm213_read;
reg w_strm14_read;
reg hshStrm_TVALID;
reg[7:0] eHshStrm_TDATA;
reg eHshStrm_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    nblk_strm210_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_end_flag_1_phi_fu_165_p4;
reg    end_nblk_strm213_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln663_fu_308_p2;
reg    hshStrm_TDATA_blk_n;
reg    eHshStrm_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [63:0] tmp_20_reg_785;
wire   [63:0] n_1_fu_313_p2;
reg   [63:0] n_1_reg_793;
reg    ap_block_state3;
reg    ap_block_state3_io;
wire   [31:0] add_ln688_fu_684_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln689_fu_690_p2;
wire   [31:0] add_ln690_fu_696_p2;
wire   [31:0] add_ln691_fu_702_p2;
wire   [31:0] add_ln692_fu_708_p2;
wire   [31:0] add_ln693_fu_714_p2;
wire   [31:0] add_ln694_fu_720_p2;
wire   [31:0] add_ln695_fu_726_p2;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_done;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_idle;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_ready;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_w_strm14_read;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_h_1_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_h_1_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_g_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_g_3_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_f_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_f_3_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_e_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_e_3_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_d_1_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_d_1_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_c_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_c_3_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_b_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_b_3_out_ap_vld;
wire   [31:0] grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_a_3_out;
wire    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_a_3_out_ap_vld;
reg   [0:0] end_flag_1_reg_162;
reg    ap_block_state1;
reg   [31:0] h_reg_171;
reg    ap_block_state2;
reg   [31:0] g_reg_183;
reg   [31:0] f_reg_195;
reg   [31:0] e_reg_207;
reg   [31:0] d_reg_219;
reg   [31:0] c_reg_231;
reg   [31:0] b_reg_243;
reg   [31:0] a_reg_255;
reg   [63:0] n_reg_267;
reg    grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg;
reg    ap_block_state3_ignore_call4;
wire    ap_CS_fsm_state4;
wire   [7:0] t3_7_fu_427_p1;
wire   [7:0] tmp_fu_431_p4;
wire   [7:0] tmp_1_fu_441_p4;
wire   [7:0] t0_7_fu_417_p4;
wire   [7:0] t3_6_fu_413_p1;
wire   [7:0] tmp_2_fu_451_p4;
wire   [7:0] tmp_3_fu_461_p4;
wire   [7:0] t0_6_fu_403_p4;
wire   [7:0] t3_5_fu_399_p1;
wire   [7:0] tmp_4_fu_471_p4;
wire   [7:0] tmp_5_fu_481_p4;
wire   [7:0] t0_5_fu_389_p4;
wire   [7:0] t3_4_fu_385_p1;
wire   [7:0] tmp_6_fu_491_p4;
wire   [7:0] tmp_7_fu_501_p4;
wire   [7:0] t0_4_fu_375_p4;
wire   [7:0] t3_3_fu_371_p1;
wire   [7:0] tmp_8_fu_511_p4;
wire   [7:0] tmp_9_fu_521_p4;
wire   [7:0] t0_3_fu_361_p4;
wire   [7:0] t3_2_fu_357_p1;
wire   [7:0] tmp_s_fu_531_p4;
wire   [7:0] tmp_10_fu_541_p4;
wire   [7:0] t0_2_fu_347_p4;
wire   [7:0] t3_1_fu_343_p1;
wire   [7:0] tmp_11_fu_551_p4;
wire   [7:0] tmp_12_fu_561_p4;
wire   [7:0] t0_1_fu_333_p4;
wire   [7:0] t3_fu_329_p1;
wire   [7:0] tmp_13_fu_571_p4;
wire   [7:0] tmp_14_fu_581_p4;
wire   [7:0] t0_fu_319_p4;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg = 1'b0;
end

hmac_sha256_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start),
    .ap_done(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_done),
    .ap_idle(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_idle),
    .ap_ready(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_ready),
    .w_strm14_dout(w_strm14_dout),
    .w_strm14_num_data_valid(6'd0),
    .w_strm14_fifo_cap(6'd0),
    .w_strm14_empty_n(w_strm14_empty_n),
    .w_strm14_read(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_w_strm14_read),
    .h(h_reg_171),
    .g(g_reg_183),
    .f(f_reg_195),
    .e(e_reg_207),
    .d(d_reg_219),
    .c(c_reg_231),
    .b(b_reg_243),
    .a(a_reg_255),
    .h_1_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_h_1_out),
    .h_1_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_h_1_out_ap_vld),
    .g_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_g_3_out),
    .g_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_g_3_out_ap_vld),
    .f_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_f_3_out),
    .f_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_f_3_out_ap_vld),
    .e_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_e_3_out),
    .e_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_e_3_out_ap_vld),
    .d_1_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_d_1_out),
    .d_1_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_d_1_out_ap_vld),
    .c_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_c_3_out),
    .c_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_c_3_out_ap_vld),
    .b_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_b_3_out),
    .b_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_b_3_out_ap_vld),
    .a_3_out(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_a_3_out),
    .a_3_out_ap_vld(grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_a_3_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg <= 1'b0;
    end else begin
        if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg <= 1'b1;
        end else if ((grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_ready == 1'b1)) begin
            grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_reg_255 <= add_ln688_fu_684_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_255 <= 32'd1779033703;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_reg_243 <= add_ln689_fu_690_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_reg_243 <= 32'd3144134277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_reg_231 <= add_ln690_fu_696_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_231 <= 32'd1013904242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_reg_219 <= add_ln691_fu_702_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        d_reg_219 <= 32'd2773480762;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        e_reg_207 <= add_ln692_fu_708_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        e_reg_207 <= 32'd1359893119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_reg_195 <= add_ln693_fu_714_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        f_reg_195 <= 32'd2600822924;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        g_reg_183 <= add_ln694_fu_720_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        g_reg_183 <= 32'd528734635;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_reg_171 <= add_ln695_fu_726_p2;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_reg_171 <= 32'd1541459225;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_reg_267 <= n_1_reg_793;
    end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_reg_267 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((end_nblk_strm213_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        end_flag_1_reg_162 <= end_nblk_strm213_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        n_1_reg_793 <= n_1_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_20_reg_785 <= nblk_strm210_dout;
    end
end

always @ (*) begin
    if (((end_nblk_strm213_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0)))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((eHshStrm_TREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((eHshStrm_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        eHshStrm_TDATA = 8'd1;
    end else if ((~(((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        eHshStrm_TDATA = 8'd0;
    end else begin
        eHshStrm_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        eHshStrm_TDATA_blk_n = eHshStrm_TREADY;
    end else begin
        eHshStrm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((eHshStrm_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        eHshStrm_TVALID = 1'b1;
    end else begin
        eHshStrm_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        end_nblk_strm213_blk_n = end_nblk_strm213_empty_n;
    end else begin
        end_nblk_strm213_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((end_nblk_strm213_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        end_nblk_strm213_read = 1'b1;
    end else begin
        end_nblk_strm213_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        hshStrm_TDATA_blk_n = hshStrm_TREADY;
    end else begin
        hshStrm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        hshStrm_TVALID = 1'b1;
    end else begin
        hshStrm_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        nblk_strm210_blk_n = nblk_strm210_empty_n;
    end else begin
        nblk_strm210_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        nblk_strm210_read = 1'b1;
    end else begin
        nblk_strm210_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_strm14_read = grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_w_strm14_read;
    end else begin
        w_strm14_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((end_nblk_strm213_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (end_flag_1_reg_162 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0)) & (ap_phi_mux_end_flag_1_phi_fu_165_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0))) & (icmp_ln663_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((eHshStrm_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln688_fu_684_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_a_3_out + a_reg_255);

assign add_ln689_fu_690_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_b_3_out + b_reg_243);

assign add_ln690_fu_696_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_c_3_out + c_reg_231);

assign add_ln691_fu_702_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_d_1_out + d_reg_219);

assign add_ln692_fu_708_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_e_3_out + e_reg_207);

assign add_ln693_fu_714_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_f_3_out + f_reg_195);

assign add_ln694_fu_720_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_g_3_out + g_reg_183);

assign add_ln695_fu_726_p2 = (grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_h_1_out + h_reg_171);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((end_nblk_strm213_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((end_flag_1_reg_162 == 1'd0) & (nblk_strm210_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = (((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state3_ignore_call4 = (((icmp_ln663_fu_308_p2 == 1'd1) & (end_nblk_strm213_empty_n == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((icmp_ln663_fu_308_p2 == 1'd1) & (eHshStrm_TREADY == 1'b0)) | ((icmp_ln663_fu_308_p2 == 1'd1) & (hshStrm_TREADY == 1'b0)));
end

assign ap_phi_mux_end_flag_1_phi_fu_165_p4 = end_flag_1_reg_162;

assign grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start = grp_sha256Digest_256_3_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_278_ap_start_reg;

assign hshStrm_TDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t3_7_fu_427_p1}, {tmp_fu_431_p4}}, {tmp_1_fu_441_p4}}, {t0_7_fu_417_p4}}, {t3_6_fu_413_p1}}, {tmp_2_fu_451_p4}}, {tmp_3_fu_461_p4}}, {t0_6_fu_403_p4}}, {t3_5_fu_399_p1}}, {tmp_4_fu_471_p4}}, {tmp_5_fu_481_p4}}, {t0_5_fu_389_p4}}, {t3_4_fu_385_p1}}, {tmp_6_fu_491_p4}}, {tmp_7_fu_501_p4}}, {t0_4_fu_375_p4}}, {t3_3_fu_371_p1}}, {tmp_8_fu_511_p4}}, {tmp_9_fu_521_p4}}, {t0_3_fu_361_p4}}, {t3_2_fu_357_p1}}, {tmp_s_fu_531_p4}}, {tmp_10_fu_541_p4}}, {t0_2_fu_347_p4}}, {t3_1_fu_343_p1}}, {tmp_11_fu_551_p4}}, {tmp_12_fu_561_p4}}, {t0_1_fu_333_p4}}, {t3_fu_329_p1}}, {tmp_13_fu_571_p4}}, {tmp_14_fu_581_p4}}, {t0_fu_319_p4}};

assign icmp_ln663_fu_308_p2 = ((n_reg_267 == tmp_20_reg_785) ? 1'b1 : 1'b0);

assign n_1_fu_313_p2 = (n_reg_267 + 64'd1);

assign t0_1_fu_333_p4 = {{b_reg_243[31:24]}};

assign t0_2_fu_347_p4 = {{c_reg_231[31:24]}};

assign t0_3_fu_361_p4 = {{d_reg_219[31:24]}};

assign t0_4_fu_375_p4 = {{e_reg_207[31:24]}};

assign t0_5_fu_389_p4 = {{f_reg_195[31:24]}};

assign t0_6_fu_403_p4 = {{g_reg_183[31:24]}};

assign t0_7_fu_417_p4 = {{h_reg_171[31:24]}};

assign t0_fu_319_p4 = {{a_reg_255[31:24]}};

assign t3_1_fu_343_p1 = b_reg_243[7:0];

assign t3_2_fu_357_p1 = c_reg_231[7:0];

assign t3_3_fu_371_p1 = d_reg_219[7:0];

assign t3_4_fu_385_p1 = e_reg_207[7:0];

assign t3_5_fu_399_p1 = f_reg_195[7:0];

assign t3_6_fu_413_p1 = g_reg_183[7:0];

assign t3_7_fu_427_p1 = h_reg_171[7:0];

assign t3_fu_329_p1 = a_reg_255[7:0];

assign tmp_10_fu_541_p4 = {{c_reg_231[23:16]}};

assign tmp_11_fu_551_p4 = {{b_reg_243[15:8]}};

assign tmp_12_fu_561_p4 = {{b_reg_243[23:16]}};

assign tmp_13_fu_571_p4 = {{a_reg_255[15:8]}};

assign tmp_14_fu_581_p4 = {{a_reg_255[23:16]}};

assign tmp_1_fu_441_p4 = {{h_reg_171[23:16]}};

assign tmp_2_fu_451_p4 = {{g_reg_183[15:8]}};

assign tmp_3_fu_461_p4 = {{g_reg_183[23:16]}};

assign tmp_4_fu_471_p4 = {{f_reg_195[15:8]}};

assign tmp_5_fu_481_p4 = {{f_reg_195[23:16]}};

assign tmp_6_fu_491_p4 = {{e_reg_207[15:8]}};

assign tmp_7_fu_501_p4 = {{e_reg_207[23:16]}};

assign tmp_8_fu_511_p4 = {{d_reg_219[15:8]}};

assign tmp_9_fu_521_p4 = {{d_reg_219[23:16]}};

assign tmp_fu_431_p4 = {{h_reg_171[15:8]}};

assign tmp_s_fu_531_p4 = {{c_reg_231[15:8]}};

endmodule //hmac_sha256_sha256Digest_256_3
